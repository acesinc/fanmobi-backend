---
# These tasks will download fanmobi-backend from GitHub (a branch or tag name).
# The necessary dependencies are installed, and the backend is deployed using
# init.d

- name: Remove any existing backend directory
  file:
    path: /usr/local/fanmobi/backend
    state: absent
  become: true

- name: Create the directory for the backend
  file:
    path: /usr/local/fanmobi/backend
    state: directory
    owner: fanmobi
  become: true

- name: Remove any existing python env
  file:
    path: /usr/local/fanmobi/python-env
    state: absent
  become: true

- name: Create python env
  shell: mkdir -p /usr/local/fanmobi/python-env;  python3 -m venv /usr/local/fanmobi/python-env
  become: true
  become_user: fanmobi

###############################################################################
#                                 GitHub
###############################################################################

- name: Download source from GitHub tag
  git:
    repo: ssh://git@github.com/TradecraftIT/fanmobi-backend.git
    dest: /usr/local/fanmobi/backend/fanmobi-backend
    accept_hostkey: yes
    key_file: /home/fanmobi/.ssh/alan_fanmobi_id_rsa
    force: true
  become: true
  become_user: fanmobi

- name: Checkout git branch or tag name
  command: git checkout {{ git_tag_or_branch_name }}
  args:
    chdir: /usr/local/fanmobi/backend/fanmobi-backend
  become: true
  become_user: fanmobi


  #- name: Fix Python sandbox problem
  #  shell: chown -R fanmobi /usr/local/lib/python3.4/lib2to3/
  #  become: true

- name: Install python dependencies
  shell: . /usr/local/fanmobi/python-env/bin/activate && pip3.4 install -r requirements.txt -I
  args:
    chdir: /usr/local/fanmobi/backend/fanmobi-backend
  become: true
  become_user: fanmobi

- name: Use custom settings.py file
  template:
    src: settings.py.j2
    dest: /usr/local/fanmobi/backend/fanmobi-backend/fanmobi/settings.py
    owner: fanmobi
    mode: 0644
  become: true

# Alternatively, copy an existing settings.py file
- name: Use non-templated settings.py file
  when: use_static_settings_file
  copy:
    src: settings.py
    dest: /usr/local/fanmobi/backend/fanmobi-backend/fanmobi/settings.py
    mode: 0644
  become: true
  become_user: fanmobi

- name: Copy init file
  copy:
    src: gunicorn.conf
    dest: /etc/init/gunicorn.conf
    mode: 0755
  become: true

- name: Create the directory for the images
  file:
    path: /usr/local/fanmobi/fanmobi_media
    state: directory
    recurse: true
    owner: fanmobi
  become: true

  #- name: Create the directory for the nfs mount (for images)
  #  file:
  #    path: /mnt/nfs/fanmobi_media
  #    state: directory
  #    recurse: true
  #    owner: fanmobi
  #  become: true
  #
  #- name: Mount the image directory via nfs
  #  when: image_fqdn != "localhost"
  #  mount:
  #    src: "{{ image_fqdn }}:/usr/local/fanmobi/media"
  #    name: /mnt/nfs/fanmobi_media
  #    state: mounted
  #    fstype: nfs
  #    opts: rw
  #  become: true

## WARNING: This will destroy all exiting data!!!
- name: Redeploy the service AND reset the database with sample data
  when: reset_database
  run_once: true
  command: service gunicorn_fanmobi nuke
  become: true

#- name: Reinstall the backend (also installs python dependencies from release)
- name: Restart the backend
  command: service gunicorn restart
  become: true

- name: Ensure the service is running (and enable it at boot)
  service: name=gunicorn state=started enabled=yes
  become: true
  ignore_errors: true

